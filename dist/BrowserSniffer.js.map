{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/BrowserSniffer.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","BrowserSniffer","browser","RegExp","test","this","name","version","temp","matched","constructor","ua","match","browserRegex","tridentRegex","ieRegex","exec","chromeRegex","slice","join","replace","navigator","appName","appVersion","versionRegex","splice","substr","indexOf","userAgent"],"mappings":"CAAA,WAAA,OAAA,SAAAA,EAAAC,EAAAC,EAAAC,GAAA,SAAAC,EAAAC,EAAAC,GAAA,IAAAJ,EAAAG,GAAA,CAAA,IAAAJ,EAAAI,GAAA,CAAA,IAAAE,EAAA,mBAAAC,SAAAA,QAAA,IAAAF,GAAAC,EAAA,OAAAA,EAAAF,GAAA,GAAA,GAAAI,EAAA,OAAAA,EAAAJ,GAAA,GAAA,IAAAK,EAAA,IAAAC,MAAA,uBAAAN,EAAA,KAAA,MAAAK,EAAAE,KAAA,mBAAAF,EAAA,IAAAG,EAAAX,EAAAG,IAAAS,YAAAb,EAAAI,GAAA,GAAAU,KAAAF,EAAAC,QAAA,SAAAd,GAAA,IAAAE,EAAAD,EAAAI,GAAA,GAAAL,GAAA,OAAAI,EAAAF,GAAAF,IAAAa,EAAAA,EAAAC,QAAAd,EAAAC,EAAAC,EAAAC,GAAA,OAAAD,EAAAG,GAAAS,QAAA,IAAA,IAAAL,EAAA,mBAAAD,SAAAA,QAAAH,EAAA,EAAAA,EAAAF,EAAAa,OAAAX,IAAAD,EAAAD,EAAAE,IAAA,OAAAD,GAAA,EAAA,EAAAa,GAAA,SAAAT,EAAAU,EAAAJ,8TCAqBK,+KAwHJC,GACT,OAAO,IAAIC,OAAOD,EAAS,KAAKE,KAAKC,KAAKH,2CASpCI,GACN,OAAO,IAAIH,OAAOG,EAAM,KAAKF,KAAKC,KAAKC,2CAS9BC,GACT,OAAO,IAAIJ,OAAOI,EAAS,KAAKH,KAAKC,KAAKE,yCAhF1C,IAAIC,OAAA,EAGAC,EAAUJ,KAAKK,YAAYC,GAAGC,MAAMP,KAAKK,YAAYG,kBAGzD,OAAGR,KAAKK,YAAYI,aAAaV,KAAKK,EAAQ,IAGnC,QAFPD,EAAOH,KAAKK,YAAYK,QAAQC,KAAKX,KAAKK,YAAYC,SAEjC,IAAM,IAIb,WAAfF,EAAQ,IAGK,QAFZD,EAAOH,KAAKK,YAAYC,GAAGC,MAAMP,KAAKK,YAAYO,cAGvCT,EAAKU,MAAM,GAAGC,KAAK,KAAKC,QAAQ,MAAO,UAKtDX,EAAUA,EAAQ,IAAMA,EAAQ,GAAIA,EAAQ,KAAOY,UAAUC,QAASD,UAAUE,WAAY,MAK7E,OAFDlB,KAAKK,YAAYC,GAAGC,MAAMP,KAAKK,YAAYc,eAGrDf,EAAQgB,OAAO,EAAG,EAAGjB,EAAK,IAIvBC,EAAQU,KAAK,mCASpB,OAAOd,KAAKH,QAAQwB,OAAO,EAAGrB,KAAKH,QAAQyB,QAAQ,sCASnD,OAAOtB,KAAKH,QAAQwB,OAAOrB,KAAKH,QAAQyB,QAAQ,KAAO,0CAxGvD,OAAO,IAAIxB,OAAO,8DAA+D,0CASjF,OAAO,IAAIA,OAAO,UAAW,qCAS7B,OAAO,IAAIA,OAAO,iBAAkB,yCASpC,OAAO,IAAIA,OAAO,4DASlB,OAAO,IAAIA,OAAO,iBAAkB,gCASpC,OAAOkB,UAAUO,6BApDJ3B","file":"BrowserSniffer.js","sourcesContent":["(function(){function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s}return e})()","export default class BrowserSniffer {\r\n    /**\r\n     * Regex to return the browser from the userAgent\r\n     *\r\n     * @returns {RegExp}\r\n     */\r\n    static get browserRegex(){\r\n        return new RegExp(/(opera|chrome|safari|firefox|msie|trident(?=\\/))\\/?\\s*(\\d+)/, 'i');\r\n    }\r\n\r\n    /**\r\n     * Regex for trident browsers\r\n     *\r\n     * @returns {RegExp}\r\n     */\r\n    static get tridentRegex(){\r\n        return new RegExp(/trident/, 'i');\r\n    }\r\n\r\n    /**\r\n     * Regex for IE browsers\r\n     *\r\n     * @returns {RegExp}\r\n     */\r\n    static get ieRegex(){\r\n        return new RegExp(/\\brv[ :]+(\\d+)/, 'g');\r\n    }\r\n\r\n    /**\r\n     * Regex for Opera browsers\r\n     *\r\n     * @returns {RegExp}\r\n     */\r\n    static get chromeRegex(){\r\n        return new RegExp(/\\b(OPR|Edge)\\/(\\d+)/);\r\n    }\r\n\r\n    /**\r\n     * Regex for the version\r\n     *\r\n     * @returns {RegExp}\r\n     */\r\n    static get versionRegex(){\r\n        return new RegExp(/version\\/(\\d+)/, 'i');\r\n    }\r\n\r\n    /**\r\n     * The userAgent\r\n     *\r\n     * @returns {string}\r\n     */\r\n    static get ua(){\r\n        return navigator.userAgent;\r\n    }\r\n\r\n    /**\r\n     * Get the browser with its major version number\r\n     *\r\n     * @returns {string}\r\n     */\r\n    get browser(){\r\n        let temp;\r\n\r\n        // Get the browser from the userAgent\r\n        let matched = this.constructor.ua.match(this.constructor.browserRegex) || [];\r\n\r\n        // Test for internet explorer\r\n        if(this.constructor.tridentRegex.test(matched[1])){\r\n            temp = this.constructor.ieRegex.exec(this.constructor.ua) || [];\r\n\r\n            return 'IE ' + (temp[1] || '');\r\n        }\r\n\r\n        // Test for chrome or opera\r\n        if(matched[1] === 'Chrome'){\r\n            temp = this.constructor.ua.match(this.constructor.chromeRegex);\r\n\r\n            if(temp !== null){\r\n                return temp.slice(1).join(' ').replace('OPR', 'Opera');\r\n            }\r\n        }\r\n\r\n        // Other browsers\r\n        matched = matched[2] ? [matched[1], matched[2]] : [navigator.appName, navigator.appVersion, '-?'];\r\n\r\n        // Get the major version of the browser\r\n        let version = this.constructor.ua.match(this.constructor.versionRegex);\r\n\r\n        if(version !== null){\r\n            matched.splice(1, 1, temp[1]);\r\n        }\r\n\r\n        // Return the browser with it's major version\r\n        return matched.join(' ');\r\n    }\r\n\r\n    /**\r\n     * Get the browser without its version number\r\n     *\r\n     * @returns {string}\r\n     */\r\n    get name(){\r\n        return this.browser.substr(0, this.browser.indexOf(' '));\r\n    }\r\n\r\n    /**\r\n     * Get the browsers major version number\r\n     *\r\n     * @returns {string}\r\n     */\r\n    get version(){\r\n        return this.browser.substr(this.browser.indexOf(' ') + 1);\r\n    }\r\n\r\n    /**\r\n     * Regex match against the browser with its version number\r\n     *\r\n     * @param browser\r\n     * @returns {boolean}\r\n     */\r\n    matchBrowser(browser){\r\n        return new RegExp(browser, 'i').test(this.browser);\r\n    }\r\n\r\n    /**\r\n     * Regex match against the browser's name only\r\n     *\r\n     * @param name\r\n     * @returns {boolean}\r\n     */\r\n    matchName(name){\r\n        return new RegExp(name, 'i').test(this.name);\r\n    }\r\n\r\n    /**\r\n     * Regex match against the browser's major version number\r\n     *\r\n     * @param version\r\n     * @returns {boolean}\r\n     */\r\n    matchVersion(version){\r\n        return new RegExp(version, 'i').test(this.version);\r\n    }\r\n}\r\n"]}